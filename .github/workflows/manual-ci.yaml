name: Manual CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'main'

permissions:
  contents: read
  attestations: write
  packages: write
  id-token: write
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.8
        env:
          TZ: UTC
        ports:
          - 5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: dex
        ports:
          - 3306
        options: --health-cmd "mysql -proot -e \"show databases;\"" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Download Dependencies
        run: make deps

      - name: Run Tests
        run: make testall

  lint:
    name: Run Linter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Download GolangCI-Lint
        run: make bin/golangci-lint

      - name: Run Linter
        run: make lint

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        run: |
          aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin public.ecr.aws

      - name: Define Image Name
        id: image-name
        run: echo "IMAGE_NAME=public.ecr.aws/u6x9w5c9/my-repo" >> $GITHUB_ENV

      - name: Extract Short SHA
        id: short-sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
            ${{ env.IMAGE_NAME }}:latest
          push: true
          provenance: false

      - name: Output Image Reference
        run: echo "Image pushed: ${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}"

  trivy-scan:
    name: Security Scan with Trivy
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Define Image Name
        id: image-name
        run: echo "IMAGE_NAME=public.ecr.aws/u6x9w5c9/my-repo" >> $GITHUB_ENV

      - name: Get Current Date
        id: date
        run: echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Restore Trivy Cache
        uses: actions/cache@v4
        with:
          path: cache/db
          key: trivy-cache-${{ env.DATE }}
          restore-keys: trivy-cache-

      - name: Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          format: sarif
          output: trivy-results.sarif
          cache-dir: "./cache"

      - name: Upload Trivy Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: "Trivy-Security-Scan"
          path: trivy-results.sarif
          retention-days: 5
          overwrite: true

      - name: Upload Trivy Scan to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
